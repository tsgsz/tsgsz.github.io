
import sys
sys.path.insert(0, '/Users/Pine/Workspace/python/typhoon-blade/src/blade')


import os
import subprocess
import signal
import time
import socket
import glob

import blade_util
import console
import scons_helper

from build_environment import ScacheManager
from console import colors
from scons_helper import MakeAction
from scons_helper import create_fast_link_builders
from scons_helper import echospawn
from scons_helper import error_colorize
from scons_helper import generate_python_binary
from scons_helper import generate_resource_file
from scons_helper import generate_resource_header

if not os.path.exists('build64_release'):
    os.mkdir('build64_release')
os.environ["LC_ALL"] = "C"
top_env = Environment(ENV=os.environ)
top_env.Decider("MD5-timestamp")
console.color_enabled=True
top_env["SPAWN"] = echospawn

compile_proto_cc_message = '%sCompiling %s$SOURCE%s to cc source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_proto_java_message = '%sCompiling %s$SOURCE%s to java source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_proto_php_message = '%sCompiling %s$SOURCE%s to php source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_proto_python_message = '%sCompiling %s$SOURCE%s to python source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_thrift_cc_message = '%sCompiling %s$SOURCE%s to cc source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_thrift_java_message = '%sCompiling %s$SOURCE%s to java source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_thrift_python_message = '%sCompiling %s$SOURCE%s to python source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_resource_header_message = '%sGenerating resource header %s$TARGET%s%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_resource_message = '%sCompiling %s$SOURCE%s as resource file%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_source_message = '%sCompiling %s$SOURCE%s%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

link_program_message = '%sLinking Program %s$TARGET%s%s' %     (colors('green'), colors('purple'), colors('green'), colors('end'))

link_library_message = '%sCreating Static Library %s$TARGET%s%s' %     (colors('green'), colors('purple'), colors('green'), colors('end'))

ranlib_library_message = '%sRanlib Library %s$TARGET%s%s' %     (colors('green'), colors('purple'), colors('green'), colors('end')) 
link_shared_library_message = '%sLinking Shared Library %s$TARGET%s%s' %     (colors('green'), colors('purple'), colors('green'), colors('end'))

compile_java_jar_message = '%sGenerating java jar %s$TARGET%s%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_python_binary_message = '%sGenerating python binary %s$TARGET%s%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_yacc_message = '%sYacc %s$SOURCE%s to $TARGET%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_swig_python_message = '%sCompiling %s$SOURCE%s to python source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_swig_java_message = '%sCompiling %s$SOURCE%s to java source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))

compile_swig_php_message = '%sCompiling %s$SOURCE%s to php source%s' %     (colors('cyan'), colors('purple'), colors('cyan'), colors('end'))


top_env.Append(
    CXXCOMSTR = compile_source_message,
    CCCOMSTR = compile_source_message,
    SHCCCOMSTR = compile_source_message,
    SHCXXCOMSTR = compile_source_message,
    ARCOMSTR = link_library_message,
    RANLIBCOMSTR = ranlib_library_message,
    SHLINKCOMSTR = link_shared_library_message,
    LINKCOMSTR = link_program_message,
    JAVACCOMSTR = compile_source_message
)
VariantDir("build64_release", ".", duplicate=0)

env_version = Environment(ENV = os.environ)
env_version.Append(SHCXXCOMSTR = '%sUpdating version information%s' % (colors('cyan'), colors('end')))
env_version.Append(CPPFLAGS = '-m64')
version_obj = env_version.SharedObject('build64_release/version.cpp')

time_value = Value("Thu Nov  7 02:44:31 2013")
proto_bld = Builder(action = MakeAction("thirdparty/protobuf/bin/protoc --proto_path=. -I. -I thirdparty -I=`dirname $SOURCE` --cpp_out=build64_release $SOURCE", compile_proto_cc_message))
proto_java_bld = Builder(action = MakeAction("thirdparty/protobuf/bin/protoc --proto_path=. --proto_path=thirdparty --java_out=build64_release/`dirname $SOURCE` $SOURCE", compile_proto_java_message))
proto_php_bld = Builder(action = MakeAction("thirdparty/protobuf/bin/protoc --proto_path=. --plugin=protoc-gen-php=thirdparty/Protobuf-PHP/protoc-gen-php.php -I. -I thirdparty -Ithirdparty/Protobuf-PHP/library -I=`dirname $SOURCE` --php_out=build64_release/`dirname $SOURCE` $SOURCE", compile_proto_php_message))
proto_python_bld = Builder(action = MakeAction("thirdparty/protobuf/bin/protoc --proto_path=. -I. -I thirdparty -I=`dirname $SOURCE` --python_out=build64_release $SOURCE", compile_proto_python_message))
thrift_bld = Builder(action = MakeAction("/usr/local/bin/thrift --gen cpp:include_prefix -I .  -I `dirname $SOURCE` -out build64_release/`dirname $SOURCE` $SOURCE", compile_thrift_cc_message))
thrift_java_bld = Builder(action = MakeAction("/usr/local/bin/thrift --gen java -I .  -I `dirname $SOURCE` -out build64_release/`dirname $SOURCE` $SOURCE", compile_thrift_java_message))
thrift_python_bld = Builder(action = MakeAction("/usr/local/bin/thrift --gen py -I .  -I `dirname $SOURCE` -out build64_release/`dirname $SOURCE` $SOURCE", compile_thrift_python_message))

blade_jar_bld = Builder(action = MakeAction('jar cf $TARGET -C `dirname $SOURCE` .',
    compile_java_jar_message))

yacc_bld = Builder(action = MakeAction('bison $YACCFLAGS -d -o $TARGET $SOURCE',
    compile_yacc_message))

resource_header_bld = Builder(action = MakeAction(generate_resource_header,
    compile_resource_header_message))

resource_file_bld = Builder(action = MakeAction(generate_resource_file,
    compile_resource_message))

python_binary_bld = Builder(action = MakeAction(generate_python_binary,
    compile_python_binary_message))

top_env.Append(BUILDERS = {"Proto" : proto_bld})
top_env.Append(BUILDERS = {"ProtoJava" : proto_java_bld})
top_env.Append(BUILDERS = {"ProtoPhp" : proto_php_bld})
top_env.Append(BUILDERS = {"ProtoPython" : proto_python_bld})
top_env.Append(BUILDERS = {"Thrift" : thrift_bld})
top_env.Append(BUILDERS = {"ThriftJava" : thrift_java_bld})
top_env.Append(BUILDERS = {"ThriftPython" : thrift_python_bld})
top_env.Append(BUILDERS = {"BladeJar" : blade_jar_bld})
top_env.Append(BUILDERS = {"Yacc" : yacc_bld})
top_env.Append(BUILDERS = {"ResourceHeader" : resource_header_bld})
top_env.Append(BUILDERS = {"ResourceFile" : resource_file_bld})
top_env.Append(BUILDERS = {"PythonBinary" : python_binary_bld})
top_env.Replace(CC="gcc", CXX="g++", CPPPATH=["thirdparty", "build64_release", "/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7"], CPPFLAGS=['-m64', '-mcx16', '-pipe', '-g', '-DNDEBUG', '-D_FILE_OFFSET_BITS=64', '-D__STDC_FORMAT_MACROS', '-D__STDC_LIMIT_MACROS'], CFLAGS=[], CXXFLAGS=[], LINK="g++", LINKFLAGS=['-m64'])
env_with_error = top_env.Clone()
env_no_warning = top_env.Clone()
env_with_error.Append(CPPFLAGS=['-Wall', '-Wextra', '-Wno-unused-but-set-variable', '-Wno-unused-parameter', '-Wno-unused-local-typedefs', '-Wno-missing-field-initializers', '-Wendif-labels', '-Wfloat-equal', '-Wformat=2', '-Wframe-larger-than=69632', '-Wmissing-include-dirs', '-Wpointer-arith', '-Wwrite-strings', '-Werror=char-subscripts', '-Werror=comments', '-Werror=conversion-null', '-Werror=empty-body', '-Werror=endif-labels', '-Werror=format', '-Werror=format-nonliteral', '-Werror=missing-include-dirs', '-Werror=overflow', '-Werror=parentheses', '-Werror=reorder', '-Werror=return-type', '-Werror=sequence-point', '-Werror=sign-compare', '-Werror=switch', '-Werror=type-limits', '-Werror=uninitialized', '-Werror=unused-label', '-Werror=unused-result', '-Werror=unused-value', '-Werror=unused-variable', '-Werror=write-strings'], CFLAGS=['-Werror-implicit-function-declaration'], CXXFLAGS=['-Wno-invalid-offsetof', '-Wnon-virtual-dtor', '-Woverloaded-virtual', '-Wvla', '-Werror=non-virtual-dtor', '-Werror=non-virtual-dtor', '-Werror=overloaded-virtual', '-Werror=vla'])
env_v_test_mAgIc_fool = env_with_error.Clone()
env_v_test_mAgIc_fool.Append(CPPFLAGS=['-O2', '-fno-omit-frame-pointer'])
v_test_mAgIc_fool_cc_fool_object = env_v_test_mAgIc_fool.SharedObject(target = "build64_release/test/fool.objs/fool.cc" + top_env["OBJSUFFIX"], source = "build64_release/test/fool.cc")
env_v_test_mAgIc_fool.Depends(v_test_mAgIc_fool_cc_fool_object, "build64_release/test/fool.cc")
objs_v_test_mAgIc_fool = [v_test_mAgIc_fool_cc_fool_object]
v_test_mAgIc_fool = env_v_test_mAgIc_fool.Library("build64_release/test/fool", objs_v_test_mAgIc_fool)
env_v_test_mAgIc_fool.Depends(v_test_mAgIc_fool, objs_v_test_mAgIc_fool)
env_v_test_mAgIc_me = env_with_error.Clone()
env_v_test_mAgIc_me.Append(CPPFLAGS=['-O2', '-fno-omit-frame-pointer'])
v_test_mAgIc_me_cc_me_object = env_v_test_mAgIc_me.SharedObject(target = "build64_release/test/me.objs/me.cc" + top_env["OBJSUFFIX"], source = "build64_release/test/me.cc")
env_v_test_mAgIc_me.Depends(v_test_mAgIc_me_cc_me_object, "build64_release/test/me.cc")
objs_v_test_mAgIc_me = [v_test_mAgIc_me_cc_me_object]
v_test_mAgIc_me = env_v_test_mAgIc_me.Library("build64_release/test/me", objs_v_test_mAgIc_me)
env_v_test_mAgIc_me.Depends(v_test_mAgIc_me, objs_v_test_mAgIc_me)
